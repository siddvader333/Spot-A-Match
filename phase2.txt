DEPLOYMENT: https://mighty-refuge-58998.herokuapp.com/

For phase 2 of the project, our primary purpose was to integrate the Spotify API with our web app to achieve as much of the functionality from our proposal as possible. While we were not able to achieve full functionality in all aspects of our web application, we believe that we made decent progress (especially with the Spotify API still being in beta, and therefore, incredibly difficult to debug). 

Below, we highlight the features of our application, including some changes from phase 1: 

1) The login page now has just 1 button: log in via Spotify. We discussed the admin feature with our TA, and determined that our program's premium vs. regular user differences would serve as a sufficient substitute to the admin vs. regular user specified in the handout. The user is redirected to the Spotify page to log in, and is then redirected to the dashboard. 

2) On the dashboard, the user will have 3 options: join a private session, join a hosted room, or host a room (available only to premium users). The user can open the menu, which allows them to view their profile, upgrade to premium status, and log out. 

3) Joining a session works as follows. Two users will be randomly paired up together (if no other user is available for pairing, the users are added to a queue for 30 seconds, after which, if they still cannot find a match, they will be told to try again later). In this private session, they can message each other, add songs to the shared queue, and play songs so that both users can hear the same music at once. They can also skip and pause songs in-sync. 

4) Joining a hosted room works almost the exact same way. The users are randomly placed into the currently emptiest room. If no room exists, they are asked to try again later. Then, in the room, they are able to message all other users in a group chat, and can see who sent which messages in the chat. They can also request songs to the host of the room. Users in these hosted rooms cannot add songs to the queue or modify the playing of the songs â€” we want to simulate a DJ with these rooms. 

5) Hosting a room is very similar. They are able to message all users in their chat. They are able to add songs to the queue themselves. They are able to see requests from other users and approve/decline them. At any point, they can also close the room, which kicks all of the users out. 

6) Users can check out their profile at any time, which tells them statistics about themselves such as number of rooms joined, etc. 

7) As of now, when the user clicks "Upgrade" to premium, a simple modal shows up informing them of their upgrade, and they can now host a room. 
